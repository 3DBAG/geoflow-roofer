# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Test on multiple platforms

on:
  push:
    branches: [ "feature/ci" ]
  pull_request:
    branches: [ "feature/ci" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # See: https://github.com/actions/runner-images?tab=readme-ov-file#available-images
      matrix:
#        os: [ubuntu-22.04, ubuntu-24.04, windows-2022, macos-13, macos-14]
        os: [ubuntu-22.04, ubuntu-24.04]
        build_type: [Release]
        c_compiler: [gcc-13, clang-15, clang-18, cl]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-22.04
            c_compiler: clang-15
            cpp_compiler: clang++-15
          - os: ubuntu-24.04
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-24.04
            c_compiler: clang-18
            cpp_compiler: clang++-18
#          - os: windows-2022
#            c_compiler: cl
#            cpp_compiler: cl
#          - os: macos-13
#            c_compiler: /usr/local/opt/llvm@15/bin/clang
#            cpp_compiler: /usr/local/opt/llvm@15/bin/clang++
#          - os: macos-14
#            c_compiler: /usr/local/opt/llvm@15/bin/clang
#            cpp_compiler: /usr/local/opt/llvm@15/bin/clang++
        exclude:
          - os: ubuntu-22.04
            c_compiler: cl
          - os: ubuntu-22.04
            c_compiler: clang-18
          - os: ubuntu-24.04
            c_compiler: cl
          - os: ubuntu-24.04
            c_compiler: clang-15
#          - os: windows-2022
#            c_compiler: gcc-13
#          - os: windows-2022
#            c_compiler: clang-15
#          - os: macos-13
#            c_compiler: cl
#          - os: macos-13
#            c_compiler: gcc-13
#          - os: macos-13
#            c_compiler: clang-15
#          - os: macos-14
#            c_compiler: cl
#          - os: macos-14
#            c_compiler: gcc-13
#          - os: macos-14
#            c_compiler: clang-15

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "cmake-toolchain-file"=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake >> "$GITHUB_OUTPUT"

      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Update vcpkg baseline
        run: vcpkg x-update-baseline

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.cmake-toolchain-file }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - run: ldd ${{ steps.strings.outputs.build-output-dir }}/apps/crop/crop

#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }}
