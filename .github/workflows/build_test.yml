# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Test on multiple platforms

on:
  push:
    branches: [ "develop", "feature/project-tools-refactor" ]
  pull_request:
    branches: [ "develop", "feature/project-tools-refactor" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # See: https://github.com/actions/runner-images?tab=readme-ov-file#available-images
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, windows-2022, macos-13, macos-14]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        # Default compilers:
        #   - Ubuntu 22.04 (jammy): gcc-11, clang-14
        #   - Ubuntu 24.04 (noble): gcc-13, clang-18
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-22.04
            c_compiler: cl
          - os: ubuntu-24.04
            c_compiler: cl
          - os: windows-2022
            c_compiler: gcc
          - os: windows-2022
            c_compiler: clang
          - os: macos-13
            c_compiler: cl
          - os: macos-13
            c_compiler: gcc
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        shell: bash
        run: |
          echo "BUILD_OUTPUT_DIR=${{ github.workspace }}/build" >> "$GITHUB_ENV"
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - if: matrix.os == 'macos-14'
        name: "Install vcpkg"
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg && ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> "$GITHUB_ENV"
          echo "${{ github.workspace }}/vcpkg" >> $GITHUB_PATH

      - name: Update vcpkg baseline
        run: vcpkg x-update-baseline

      - if: runner.os == 'macOS'
        name: "Install additional macOS build tools"
        run: |
          brew install autoconf-archive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ env.BUILD_OUTPUT_DIR }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          --preset vcpkg-minimal-test
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ env.BUILD_OUTPUT_DIR }} --config ${{ matrix.build_type }} --verbose

      - name: Test
        working-directory: ${{ env.BUILD_OUTPUT_DIR }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --verbose --rerun-failed

      - name: Install
        run: cmake --install . --config Release

      - name: Test installed crop
        run: crop --version

      - name: Test installed reconstruct
        run: reconstruct --version
